version: '3.8'

networks:
  traefik-public:
    external: true  # Tells Compose we already have (or want) a network named exactly "traefik-public"
  default:          # normal default network
volumes:
  traefik-public-certificates:  # used by Traefik for Let's Encrypt
  app-db-data:                  # database volume

services:
  ##############################################################################
  # 1) Traefik (Reverse Proxy)
  ##############################################################################
  traefik:
    image: traefik:3.0
    container_name: traefik-proxy
    restart: always
    ports:
      - "80:80"    # HTTP
      - "443:443"  # HTTPS
      - "8080:8080"  # Optional: Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-public-certificates:/certificates
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"

      # Entrypoints
      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"
      
      # HTTP â†’ HTTPS redirect
      - "--entrypoints.http.http.redirections.entryPoint.to=https"
      - "--entrypoints.http.http.redirections.entryPoint.scheme=https"

      # Certificates resolver "le" using TLS challenge
      - "--certificatesresolvers.le.acme.email=admin@cobaltdata.net"
      - "--certificatesresolvers.le.acme.storage=/certificates/acme.json"
      - "--certificatesresolvers.le.acme.tlschallenge=true"

      # Logging & access logs
      - "--log.level=DEBUG"
      - "--accesslog=true"

      # Dashboard & API
      - "--api=true"
      - "--api.dashboard=true"

      # Enable ping for health checks
      - "--ping=true"
      - "--ping.entrypoint=http"
    networks:
      - traefik-public

  ##############################################################################
  # 2) PostgreSQL Database
  ##############################################################################
  db:
    image: postgres:12
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
    networks:
      - traefik-public
      - default

  ##############################################################################
  # 3) Adminer (Database UI)
  ##############################################################################
  adminer:
    image: adminer
    restart: always
    networks:
      - traefik-public
      - default
    depends_on:
      - db
    environment:
      - ADMINER_DESIGN=pepa-linha-dark
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public

      - traefik.http.routers.cobaltdata-adminer-http.rule=Host(`adminer.cobaltdata.net`)
      - traefik.http.routers.cobaltdata-adminer-http.entrypoints=http

      - traefik.http.routers.cobaltdata-adminer-https.rule=Host(`adminer.cobaltdata.net`)
      - traefik.http.routers.cobaltdata-adminer-https.entrypoints=https
      - traefik.http.routers.cobaltdata-adminer-https.tls=true
      - traefik.http.routers.cobaltdata-adminer-https.tls.certresolver=le
      - traefik.http.services.cobaltdata-adminer.loadbalancer.server.port=8080

  ##############################################################################
  # 4) prestart (Runs migrations or scripts before backend)
  ##############################################################################
  prestart:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    build:
      context: ./backend
    networks:
      - traefik-public
      - default
    depends_on:
      db:
        condition: service_healthy
        restart: true
    command: bash scripts/prestart.sh
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - FRONTEND_HOST=${FRONTEND_HOST?Variable not set}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER?Variable not set}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD?Variable not set}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - SENTRY_DSN=${SENTRY_DSN}

  ##############################################################################
  # 5) Backend
  ##############################################################################
  backend:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    restart: always
    networks:
      - traefik-public
      - default
    depends_on:
      db:
        condition: service_healthy
        restart: true
      prestart:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - FRONTEND_HOST=${FRONTEND_HOST?Variable not set}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER?Variable not set}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD?Variable not set}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - SENTRY_DSN=${SENTRY_DSN}
    healthcheck:
      test: ["CMD", "curl", "-f", "https://api.cobaltdata.net/api/v1/utils/health-check/"]
      interval: 10s
      timeout: 5s
      retries: 5
    build:
      context: ./backend
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public

      - traefik.http.services.cobaltdata-backend.loadbalancer.server.port=8000

      - traefik.http.routers.cobaltdata-backend-http.rule=Host(`api.cobaltdata.net`)
      - traefik.http.routers.cobaltdata-backend-http.entrypoints=http
      - traefik.http.routers.cobaltdata-backend-http.middlewares=https-redirect

      - traefik.http.routers.cobaltdata-backend-https.rule=Host(`api.cobaltdata.net`)
      - traefik.http.routers.cobaltdata-backend-https.entrypoints=https
      - traefik.http.routers.cobaltdata-backend-https.tls=true
      - traefik.http.routers.cobaltdata-backend-https.tls.certresolver=le

  ##############################################################################
  # 6) Frontend
  ##############################################################################
  frontend:
    image: '${DOCKER_IMAGE_FRONTEND?Variable not set}:${TAG-latest}'
    restart: always
    networks:
      - traefik-public
      - default
    build:
      args:
        - VITE_API_URL=https://api.cobaltdata.net
        - NODE_ENV=production
      context: ./frontend
    environment:
      VITE_API_URL: https://api.cobaltdata.net
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public

      - traefik.http.services.cobaltdata-frontend.loadbalancer.server.port=80

      - traefik.http.routers.cobaltdata-frontend-http.rule=Host(`dashboard.cobaltdata.net`)
      - traefik.http.routers.cobaltdata-frontend-http.entrypoints=http
      - traefik.http.routers.cobaltdata-frontend-http.middlewares=https-redirect

      - traefik.http.routers.cobaltdata-frontend-https.rule=Host(`dashboard.cobaltdata.net`)
      - traefik.http.routers.cobaltdata-frontend-https.entrypoints=https
      - traefik.http.routers.cobaltdata-frontend-https.tls=true
      - traefik.http.routers.cobaltdata-frontend-https.tls.certresolver=le
